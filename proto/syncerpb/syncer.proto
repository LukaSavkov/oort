syntax = "proto3";

option go_package = "github.com/c12s/oort/proto/syncerpb";

package syncerpb;

import "common.proto";

service SyncerService {
  // ConnectResources forms a hierarchical relationship between the specified parent and child resources
  // Additionally, if any of the resources weren't previously present, this rpc creates them
  rpc ConnectResources(ConnectResourcesReq) returns (SyncResp) {}
  // DisconnectResources removes a hierarchical relationship between the specified parent and child resources
  // After removing the relationship, all orphan resources will also be removed
  rpc DisconnectResources(DisconnectResourcesReq) returns (SyncResp) {}
  // UpsertAttribute attaches a new attribute to the specified resource, or updates the value of the existing one
  // Every attribute is uniquely identified by its name. Currently supported attributed types are:
  // - int64
  // - float64
  // - bool
  // - string
  // All attribute values are serialized with the help of protobuf
  rpc UpsertAttribute(UpsertAttributeReq) returns (SyncResp) {}
  // RemoveAttribute removes an attribute by its name, from the specified resource
  rpc RemoveAttribute(RemoveAttributeReq) returns (SyncResp) {}
  // InsertPermission forms a permission relationship between subject (principal) and object (resource) resources
  // Additionally, if any of the resources wasn't previously present, this rpc creates them
  rpc InsertPermission(InsertPermissionReq) returns (SyncResp) {}
  // RemovePermission removes a permission relationship between subject (principal) and object (resource) resources
  // Permission's name and kind need to match in order to remove it
  rpc RemovePermission(RemovePermissionReq) returns (SyncResp) {}
}

message ConnectResourcesReq {
  common.Resource parent = 1;
  common.Resource child = 2;
  string id = 3;
}

message DisconnectResourcesReq {
  common.Resource parent = 1;
  common.Resource child = 2;
  string id = 3;
}

message UpsertAttributeReq {
  common.Resource resource = 1;
  common.Attribute attribute = 2;
  string id = 3;
}

message RemoveAttributeReq {
  common.Resource resource = 1;
  common.AttributeId attributeId = 2;
  string id = 3;
}

message InsertPermissionReq {
  common.Resource principal = 1;
  common.Resource resource = 2;
  common.Permission permission = 3;
  string id = 4;
}

message RemovePermissionReq {
  common.Resource principal = 1;
  common.Resource resource = 2;
  common.Permission permission = 3;
  string id = 4;
}

message SyncMessage {
  enum SyncKind {
    CONNECT_RESOURCES = 0;
    DISCONNECT_RESOURCES = 1;
    UPSERT_ATTRIBUTE = 2;
    REMOVE_ATTRIBUTE = 3;
    INSERT_PERMISSION = 4;
    REMOVE_PERMISSION = 5;
  }
  SyncKind kind = 1;
  bytes payload = 2;
}

message SyncResp {
}

message AsyncSyncResp {
  string reqId = 1;
  bool successful = 2;
  string error = 3;
}