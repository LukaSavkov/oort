// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: syncer.proto

package syncerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncerServiceClient is the client API for SyncerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerServiceClient interface {
	CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*SyncResp, error)
	DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*SyncResp, error)
	CreateInheritanceRel(ctx context.Context, in *CreateInheritanceRelReq, opts ...grpc.CallOption) (*SyncResp, error)
	DeleteInheritanceRel(ctx context.Context, in *DeleteInheritanceRelReq, opts ...grpc.CallOption) (*SyncResp, error)
	PutAttribute(ctx context.Context, in *PutAttributeReq, opts ...grpc.CallOption) (*SyncResp, error)
	DeleteAttribute(ctx context.Context, in *DeleteAttributeReq, opts ...grpc.CallOption) (*SyncResp, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*SyncResp, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*SyncResp, error)
}

type syncerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerServiceClient(cc grpc.ClientConnInterface) SyncerServiceClient {
	return &syncerServiceClient{cc}
}

func (c *syncerServiceClient) CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) CreateInheritanceRel(ctx context.Context, in *CreateInheritanceRelReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/CreateInheritanceRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DeleteInheritanceRel(ctx context.Context, in *DeleteInheritanceRelReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/DeleteInheritanceRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) PutAttribute(ctx context.Context, in *PutAttributeReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/PutAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DeleteAttribute(ctx context.Context, in *DeleteAttributeReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/DeleteAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerServiceServer is the server API for SyncerService service.
// All implementations must embed UnimplementedSyncerServiceServer
// for forward compatibility
type SyncerServiceServer interface {
	CreateResource(context.Context, *CreateResourceReq) (*SyncResp, error)
	DeleteResource(context.Context, *DeleteResourceReq) (*SyncResp, error)
	CreateInheritanceRel(context.Context, *CreateInheritanceRelReq) (*SyncResp, error)
	DeleteInheritanceRel(context.Context, *DeleteInheritanceRelReq) (*SyncResp, error)
	PutAttribute(context.Context, *PutAttributeReq) (*SyncResp, error)
	DeleteAttribute(context.Context, *DeleteAttributeReq) (*SyncResp, error)
	CreatePolicy(context.Context, *CreatePolicyReq) (*SyncResp, error)
	DeletePolicy(context.Context, *DeletePolicyReq) (*SyncResp, error)
	mustEmbedUnimplementedSyncerServiceServer()
}

// UnimplementedSyncerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerServiceServer struct {
}

func (UnimplementedSyncerServiceServer) CreateResource(context.Context, *CreateResourceReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedSyncerServiceServer) DeleteResource(context.Context, *DeleteResourceReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedSyncerServiceServer) CreateInheritanceRel(context.Context, *CreateInheritanceRelReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInheritanceRel not implemented")
}
func (UnimplementedSyncerServiceServer) DeleteInheritanceRel(context.Context, *DeleteInheritanceRelReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInheritanceRel not implemented")
}
func (UnimplementedSyncerServiceServer) PutAttribute(context.Context, *PutAttributeReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAttribute not implemented")
}
func (UnimplementedSyncerServiceServer) DeleteAttribute(context.Context, *DeleteAttributeReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttribute not implemented")
}
func (UnimplementedSyncerServiceServer) CreatePolicy(context.Context, *CreatePolicyReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedSyncerServiceServer) DeletePolicy(context.Context, *DeletePolicyReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedSyncerServiceServer) mustEmbedUnimplementedSyncerServiceServer() {}

// UnsafeSyncerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServiceServer will
// result in compilation errors.
type UnsafeSyncerServiceServer interface {
	mustEmbedUnimplementedSyncerServiceServer()
}

func RegisterSyncerServiceServer(s grpc.ServiceRegistrar, srv SyncerServiceServer) {
	s.RegisterService(&SyncerService_ServiceDesc, srv)
}

func _SyncerService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).CreateResource(ctx, req.(*CreateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DeleteResource(ctx, req.(*DeleteResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_CreateInheritanceRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInheritanceRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).CreateInheritanceRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/CreateInheritanceRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).CreateInheritanceRel(ctx, req.(*CreateInheritanceRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DeleteInheritanceRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInheritanceRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DeleteInheritanceRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/DeleteInheritanceRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DeleteInheritanceRel(ctx, req.(*DeleteInheritanceRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_PutAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).PutAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/PutAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).PutAttribute(ctx, req.(*PutAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DeleteAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DeleteAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/DeleteAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DeleteAttribute(ctx, req.(*DeleteAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).CreatePolicy(ctx, req.(*CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DeletePolicy(ctx, req.(*DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncerService_ServiceDesc is the grpc.ServiceDesc for SyncerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncerpb.SyncerService",
	HandlerType: (*SyncerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _SyncerService_CreateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _SyncerService_DeleteResource_Handler,
		},
		{
			MethodName: "CreateInheritanceRel",
			Handler:    _SyncerService_CreateInheritanceRel_Handler,
		},
		{
			MethodName: "DeleteInheritanceRel",
			Handler:    _SyncerService_DeleteInheritanceRel_Handler,
		},
		{
			MethodName: "PutAttribute",
			Handler:    _SyncerService_PutAttribute_Handler,
		},
		{
			MethodName: "DeleteAttribute",
			Handler:    _SyncerService_DeleteAttribute_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _SyncerService_CreatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _SyncerService_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer.proto",
}
