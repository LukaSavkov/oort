// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: syncer.proto

package syncerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncerServiceClient is the client API for SyncerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerServiceClient interface {
	ConnectResources(ctx context.Context, in *ConnectResourcesReq, opts ...grpc.CallOption) (*SyncResp, error)
	DisconnectResources(ctx context.Context, in *DisconnectResourcesReq, opts ...grpc.CallOption) (*SyncResp, error)
	UpsertAttribute(ctx context.Context, in *UpsertAttributeReq, opts ...grpc.CallOption) (*SyncResp, error)
	RemoveAttribute(ctx context.Context, in *RemoveAttributeReq, opts ...grpc.CallOption) (*SyncResp, error)
	InsertPermission(ctx context.Context, in *InsertPermissionReq, opts ...grpc.CallOption) (*SyncResp, error)
	RemovePermission(ctx context.Context, in *RemovePermissionReq, opts ...grpc.CallOption) (*SyncResp, error)
}

type syncerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerServiceClient(cc grpc.ClientConnInterface) SyncerServiceClient {
	return &syncerServiceClient{cc}
}

func (c *syncerServiceClient) ConnectResources(ctx context.Context, in *ConnectResourcesReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/ConnectResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) DisconnectResources(ctx context.Context, in *DisconnectResourcesReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/DisconnectResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) UpsertAttribute(ctx context.Context, in *UpsertAttributeReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/UpsertAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) RemoveAttribute(ctx context.Context, in *RemoveAttributeReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/RemoveAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) InsertPermission(ctx context.Context, in *InsertPermissionReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/InsertPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerServiceClient) RemovePermission(ctx context.Context, in *RemovePermissionReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/syncerpb.SyncerService/RemovePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerServiceServer is the server API for SyncerService service.
// All implementations must embed UnimplementedSyncerServiceServer
// for forward compatibility
type SyncerServiceServer interface {
	ConnectResources(context.Context, *ConnectResourcesReq) (*SyncResp, error)
	DisconnectResources(context.Context, *DisconnectResourcesReq) (*SyncResp, error)
	UpsertAttribute(context.Context, *UpsertAttributeReq) (*SyncResp, error)
	RemoveAttribute(context.Context, *RemoveAttributeReq) (*SyncResp, error)
	InsertPermission(context.Context, *InsertPermissionReq) (*SyncResp, error)
	RemovePermission(context.Context, *RemovePermissionReq) (*SyncResp, error)
	mustEmbedUnimplementedSyncerServiceServer()
}

// UnimplementedSyncerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerServiceServer struct {
}

func (UnimplementedSyncerServiceServer) ConnectResources(context.Context, *ConnectResourcesReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectResources not implemented")
}
func (UnimplementedSyncerServiceServer) DisconnectResources(context.Context, *DisconnectResourcesReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectResources not implemented")
}
func (UnimplementedSyncerServiceServer) UpsertAttribute(context.Context, *UpsertAttributeReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAttribute not implemented")
}
func (UnimplementedSyncerServiceServer) RemoveAttribute(context.Context, *RemoveAttributeReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAttribute not implemented")
}
func (UnimplementedSyncerServiceServer) InsertPermission(context.Context, *InsertPermissionReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertPermission not implemented")
}
func (UnimplementedSyncerServiceServer) RemovePermission(context.Context, *RemovePermissionReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermission not implemented")
}
func (UnimplementedSyncerServiceServer) mustEmbedUnimplementedSyncerServiceServer() {}

// UnsafeSyncerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServiceServer will
// result in compilation errors.
type UnsafeSyncerServiceServer interface {
	mustEmbedUnimplementedSyncerServiceServer()
}

func RegisterSyncerServiceServer(s grpc.ServiceRegistrar, srv SyncerServiceServer) {
	s.RegisterService(&SyncerService_ServiceDesc, srv)
}

func _SyncerService_ConnectResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).ConnectResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/ConnectResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).ConnectResources(ctx, req.(*ConnectResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_DisconnectResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).DisconnectResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/DisconnectResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).DisconnectResources(ctx, req.(*DisconnectResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_UpsertAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).UpsertAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/UpsertAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).UpsertAttribute(ctx, req.(*UpsertAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_RemoveAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).RemoveAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/RemoveAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).RemoveAttribute(ctx, req.(*RemoveAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_InsertPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).InsertPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/InsertPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).InsertPermission(ctx, req.(*InsertPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerService_RemovePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).RemovePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.SyncerService/RemovePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).RemovePermission(ctx, req.(*RemovePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncerService_ServiceDesc is the grpc.ServiceDesc for SyncerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncerpb.SyncerService",
	HandlerType: (*SyncerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectResources",
			Handler:    _SyncerService_ConnectResources_Handler,
		},
		{
			MethodName: "DisconnectResources",
			Handler:    _SyncerService_DisconnectResources_Handler,
		},
		{
			MethodName: "UpsertAttribute",
			Handler:    _SyncerService_UpsertAttribute_Handler,
		},
		{
			MethodName: "RemoveAttribute",
			Handler:    _SyncerService_RemoveAttribute_Handler,
		},
		{
			MethodName: "InsertPermission",
			Handler:    _SyncerService_InsertPermission_Handler,
		},
		{
			MethodName: "RemovePermission",
			Handler:    _SyncerService_RemovePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer.proto",
}
